1 + 1
clear
squad(16)
sqrt(16)
sqrt()
[((sqrt(16))/2)*3^2]/2*(9-2^3)
|((sqrt(16))/2)*3^2|/2*(9-2^3)
((sqrt(16))/2)*3^2/2*(9-2^3)
((sqrt(16))/2)*3^2/2*(9-2^3)
((sqrt(16))/2)*3^2
2*(9-2^3)
num <- ((sqrt(16))/2)*3^2
num1 <- 2*(9-2^3)
num/num1
x <- ((sqrt(16))/2)*3^2/2*(9-2^3)
-(-2^3)+(-1)^0-(sqrt((25-3^2)))-5^3/25
y <- -(-2^3)+(-1)^0-(sqrt((25-3^2)))-5^3/25
x < y
x> y
A <- c(1,2,3)
A <- c(A, 1)
A <- c(1,2,3)
A <- c(A, A + 1)
A <- c(1,2,3)
A <- A + 1
A <- c(1,2,3)
A/1
A+1
A/2
B <- c(4,5,6)
A+B
A-B
C <- c(2,3,4)
C == A
A<C
sqrt(A+B)
x <- ((sqrt(16))/2)*3^2/2*(9-2^3)
x
y <- -(-2^3)+(-1)^0-(sqrt((25-3^2)))-5^3/25
y
x > y
A <- c(1,2,3)
A
A + 1
A / 2
A * 2
B <- c(4,5,6)
B
A + B
A - B
C <- c(2,3,4)
C == A
A < C
sqrt(A+B)
# Leitura dos arquivos
train <- read.csv("/home/henrique/Documents/BigData/Desafio1/train.csv",stringsAsFactors = FALSE)
test <- read.csv("/home/henrique/Documents/BigData/Desafio1/test.csv", stringsAsFactors = FALSE)
#**** ESTOU TRABALHANDO AQUI!!!! ********
# Junte os dois conjuntos
test$Survived <- NA
combi <- rbind(train, test)
#Encontrar os dados que falta no Dataframe
which(combi$Embarked == "")
which(is.na(combi$Fare))
# Corrija única Fare ausente
combi$Fare[1044] <- mean(combi[combi$Pclass == 3 & combi$Embarked == 'S' & combi$Age > 60, 'Fare'], na.rm = TRUE)
# Corrija Embarked ausentes
combi$Embarked[c(62,830)] = "S"
combi$Embarked <- factor(combi$Embarked)
sapply(train,class)
combi$Sex[combi$Sex %in% c('female')] <- 1
combi$Sex[combi$Sex %in% c('male')] <- 2
combi$Sex <- type.convert(combi$Sex,numerals = "no.loss")
# Extraia o sobrenome e o título
aux <- strsplit(combi$Name, "(,\\s)|[.]")
# O split divide um dos nomes em muitas partes. Corrija com a linha abaixo.
aux[514][[1]] <- aux[514][[1]][-4]
aux <- do.call('rbind', aux)
combi$Surname <- aux[,1]
combi$Title <- aux[,2]
# Apresente em tabela
table(combi$Title)
# Calcule a média de idade dos passageiros por título e atribua aos passageiros sem idade
for (n in 1:nrow(combi)) {
if (is.na(combi$Age[n])) {
combi$Age[n] <- mean(combi$Age[combi$Title == combi$Title[n]], na.rm = TRUE)
} else {
combi$Age[n] <- combi$Age[n]
}
}
# Una títulos semelhantes
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Jonkheer')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess')] <- 'Lady'
# Defina como categorias
combi$Title <- factor(combi$Title)
# Agrupe pessoas em famílias
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$FamilyID <- paste(combi$FamilySize, combi$Surname, sep="")
# Priorize famílias grandes
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
# Retorne aos dois conjuntos iniciais
train <- combi[1:891,]
test <- combi[892:1309,]
install.packages('party')
library(party)
set.seed(456)
# Crie o modelo de predição
fit <- cforest(as.factor(Survived)~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID, data = train, controls = cforest_unbiased(ntree=2000,mtry=3))
# Realize a predição sobre o conjunto de teste
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
# Realize a predição sobre o conjunto de teste
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
# Crie o arquivo de saída
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "/home/henrique/Documents/BigData/Desafio1/predict1.csv", row.names = FALSE)
write.csv(submit, file = "/home/henrique/Documents/BigData/Desafio1/predict.csv", row.names = FALSE)
write.csv(submit, file = "/home/henrique/Documents/BigData/Desafio1/predict.csv", row.names = FALSE)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
# Crie o modelo de predição
fit <- cforest(as.factor(Survived)~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID, data = train, controls = cforest_unbiased(ntree=2000,mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "/home/henrique/Documents/BigData/Desafio1/predict.csv", row.names = FALSE)
Prediction
class(Prediction)
# Montagem do dataframe para saída de dados
pr_data <- cbind(test$PassengerId, Prediction)
pr_data
pr_data <- as.data.frame(pr_data)
# Nomes das colunas
names(pr_data) <- c("PassengerId", "Survived")
# Gravação em disco do arquivo a ser submetido no site Kaggle
write.csv(pr_data, file="/home/henrique/Documents/BigData/Desafio1/predict.csv", row.names = FALSE)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "/home/henrique/Documents/BigData/Desafio1/predict1.csv", row.names = FALSE)
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "/home/henrique/Documents/BigData/Desafio1/predict1.csv", row.names = FALSE)
submit <- as.data.frame(PassengerId = test$PassengerId, Survived = Prediction)
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- as.data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "/home/henrique/Documents/BigData/Desafio1/predict1.csv", row.names = FALSE)
# Leitura dos arquivos
train <- read.csv("/home/henrique/Documents/BigData/Desafio1/train.csv",stringsAsFactors = FALSE)
test <- read.csv("/home/henrique/Documents/BigData/Desafio1/test.csv", stringsAsFactors = FALSE)
#**** ESTOU TRABALHANDO AQUI!!!! ********
test$Survived
#Encontrar os dados que falta no Dataframe
#which(combi$Embarked == "")
#which(is.na(combi$Fare))
which(train$Embarked == "")
which(is.na(train$Fare))
# Corrija Embarked ausentes
combi$Embarked[c(62,830)] = "S"
train$Embarked[c(62,830)] = "S"
#combi$Embarked <- factor(combi$Embarked)
train$Embarked <- factor(train$Embarked)
sapply(train,class)
typeof(combi$Sex)
#typeof(combi$Sex)
typeof(train$Sex)
#typeof(train$Sex)
train$Sex[train$Sex %in% c('female')] <- 1
train$Sex[train$Sex %in% c('male')] <- 2
train$Sex <- type.convert(train$Sex,numerals = "no.loss")
# Extraia o sobrenome e o título
#aux <- strsplit(combi$Name, "(,\\s)|[.]")
aux <- strsplit(train$Name, "(,\\s)|[.]")
aux[514][[1]] <- aux[514][[1]][-4]
aux <- do.call('rbind', aux)
train$Surname <- aux[,1]
train$Title <- aux[,2]
# Apresente em tabela
#table(combi$Title)
table(train$Title)
# Calcule a média de idade dos passageiros por título e atribua aos passageiros sem idade
#for (n in 1:nrow(combi)) {
#  if (is.na(combi$Age[n])) {
#    combi$Age[n] <- mean(combi$Age[combi$Title == combi$Title[n]], na.rm = TRUE)
#  } else {
#    combi$Age[n] <- combi$Age[n]
#  }
#}
for (n in 1:nrow(train)) {
if (is.na(train$Age[n])) {
train$Age[n] <- mean(train$Age[train$Title == train$Title[n]], na.rm = TRUE)
} else {
train$Age[n] <- train$Age[n]
}
}
train$Title[train$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
train$Title[train$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Jonkheer')] <- 'Sir'
train$Title[train$Title %in% c('Dona', 'Lady', 'the Countess')] <- 'Lady'
# Defina como categorias
#combi$Title <- factor(combi$Title)
train$Title <- factor(train$Title)
train$FamilySize <- train$SibSp + train$Parch + 1
train$FamilyID <- paste(train$FamilySize, train$Surname, sep="")
train$FamilyID[train$FamilySize <= 2] <- 'Small'
train$FamilyID <- factor(train$FamilyID)
install.packages('party')
install.packages("party")
library(party)
set.seed(456)
# Crie o modelo de predição
fit <- cforest(as.factor(Survived)~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID, data = train, controls = cforest_unbiased(ntree=2000,mtry=3))
Prediction <- predict(fit, train, OOB=TRUE, type = "response")
submit <- as.data.frame(PassengerId = train$PassengerId, Survived = Prediction)
write.csv(submit, file = "/home/henrique/Documents/BigData/Desafio1/predict1.csv", row.names = FALSE)
typeof(aux)
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- as.data.frame(PassengerId = test$PassengerId, Survived = Prediction)
# Montagem do dataframe para saída de dados
pr_data <- cbind(test$PassengerId, Prediction)
pr_data
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
# Montagem do dataframe para saída de dados
pr_data <- cbind(test$PassengerId, Prediction)
pr_data <- as.data.frame(pr_data)
# Nomes das colunas
names(pr_data) <- c("PassengerId", "Survived")
write.csv(pr_data, file="/home/henrique/Documents/BigData/Desafio1/predict1.csv", row.names = FALSE)
pr_data$Survived[pr_data$Survived %in% c(2)] <- 1
pr_data$Survived[pr_data$Survived %in% c(1)] <- 0
# Montagem do dataframe para saída de dados
pr_data <- cbind(test$PassengerId, Prediction)
pr_data <- as.data.frame(pr_data)
pr_data$Survived[pr_data$Survived %in% c("2")] <- 1
pr_data$Survived[pr_data$Survived %in% 2] <- 1
pr_data$Survived[pr_data$Survived %in% c('1')] <- 0
pr_data$Survived[pr_data$Survived %in% c(1)] <- 0
pr_data$Survived[pr_data$Survived %in% 1] <- 0
pr_data$Survived[pr_data$Survived, 1] <- 0
pr_data$Survived[pr_data$Survived %in% '1'] <- 0
pr_data$Survived[pr_data$Survived %in% c('1')] <- 0
pr_data$Survived[pr_data$Survived %in% c(1)] <- 0
pr_data$Survived[pr_data$Survived %in% c(2)] <- 1
# Montagem do dataframe para saída de dados
pr_data <- cbind(test$PassengerId, Prediction)
pr_data <- as.data.frame(pr_data)
# Nomes das colunas
names(pr_data) <- c("PassengerId", "Survived")
pr_data$Survived[pr_data$Survived %in% c(1)] <- 0
pr_data$Survived[pr_data$Survived %in% c(2)] <- 1
write.csv(pr_data, file="/home/henrique/Documents/BigData/Desafio1/predict1.csv", row.names = FALSE)
# Configure o caminho para a pasta de trabalho
setwd("/home/henrique/Documents/BigData/Desafio1/")
# Leia os arquivos como data frames
train <- read.csv("/home/henrique/Documents/BigData/Desafio1/train.csv", stringsAsFactors = FALSE)
test <- read.csv("/home/henrique/Documents/BigData/Desafio1/test.csv", stringsAsFactors = FALSE)
# Junte os dois conjuntos
test$Survived <- NA
combi <- rbind(train, test)
# Corrija única Fare ausente
combi$Fare[1044] <- mean(combi[combi$Pclass == 3 & combi$Embarked == 'S' & combi$Age > 60, 'Fare'], na.rm = TRUE)
# Corrija Embarked ausentes
combi$Embarked[c(62,830)] = "S"
combi$Embarked <- factor(combi$Embarked)
# Extraia o sobrenome e o título
aux <- strsplit(combi$Name, "(,\\s)|[.]")
# O split divide um dos nomes em muitas partes. Corrija com a linha abaixo.
aux[514][[1]] <- aux[514][[1]][-4]
aux <- do.call('rbind', aux)
combi$Surname <- aux[,1]
combi$Title <- aux[,2]
# Apresente em tabela
table(combi$Title)
# Calcule a média de idade dos passageiros por título e atribua aos passageiros sem idade
for (n in 1:nrow(combi)) {
if (is.na(combi$Age[n])) {
combi$Age[n] <- mean(combi$Age[combi$Title == combi$Title[n]], na.rm = TRUE)
} else {
combi$Age[n] <- combi$Age[n]
}
}
# Una títulos semelhantes
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Jonkheer')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess')] <- 'Lady'
# Defina como categorias
combi$Title <- factor(combi$Title)
# Agrupe pessoas em famílias
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$FamilyID <- paste(combi$FamilySize, combi$Surname, sep="")
# Priorize famílias grandes
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
# Retorne aos dois conjuntos iniciais
train <- combi[1:891,]
test <- combi[892:1309,]
install.packages('party')
install.packages("party")
library(party)
set.seed(456) # Parâmetro usado no gerador de números aleatórios.
# Crie o modelo de predição
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
# Crie o modelo de predição
fit <- cforest(as.factor(Survived) ~ Pclass  + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
# Realize a predição sobre o conjunto de teste
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
# Crie o arquivo de saída
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
#Prediction <- predict(fit, test, OOB=TRUE, type = "response")
Prediction <- predict(fit, newdata=test)
m1<-lm(Survived~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=train)
# Previsão dos dados
p<-predict(m1, newdata=test)
# Previsão dos dados
p<-predict(m1, newdata=test)
# Leitura dos arquivos
train <- read.csv("/home/henrique/Documents/BigData/Desafio1/train.csv")
test <- read.csv("/home/henrique/Documents/BigData/Desafio1/test.csv")
# Execução do modelo
m1<-lm(Survived~Embarked, data=train)
# Previsão dos dados
p<-predict(m1, newdata=test)
pr <- ifelse(p<0.5, 0, 1)
# Montagem do dataframe para saída de dados
pr_data <- cbind(test$PassengerId, pr)
pr_data <- as.data.frame(pr_data)
# Nomes das colunas
names(pr_data) <- c("PassengerId", "Survived")
# Gravação em disco do arquivo a ser submetido no site Kaggle
write.csv(pr_data, file="predict.csv", row.names = FALSE)
# Gravação em disco do arquivo a ser submetido no site Kaggle
write.csv(pr_data, file="/home/henrique/Documents/BigData/Desafio1/predict.csv", row.names = FALSE)
# Leitura dos arquivos
train <- read.csv("/home/henrique/Documents/BigData/Desafio1/train.csv")
test <- read.csv("/home/henrique/Documents/BigData/Desafio1/test.csv")
# Execução do modelo
m1<-lm(Survived~Embarked, data=train)
# Previsão dos dados
p<-predict(m1, newdata=test)
pr <- ifelse(p<0.5, 0, 1)
# Montagem do dataframe para saída de dados
pr_data <- cbind(test$PassengerId, pr)
pr_data <- as.data.frame(pr_data)
# Nomes das colunas
names(pr_data) <- c("PassengerId", "Survived")
# Gravação em disco do arquivo a ser submetido no site Kaggle
write.csv(pr_data, file="/home/henrique/Documents/BigData/Desafio1/predict.csv", row.names = FALSE)
# Execução do modelo
m1<-lm(Survived~Pclass + Age + SibSp + Parch + Fare + Embarked, data=train)
# Previsão dos dados
p<-predict(m1, newdata=test)
pr <- ifelse(p<0.5, 0, 1)
# Montagem do dataframe para saída de dados
pr_data <- cbind(test$PassengerId, pr)
pr_data <- as.data.frame(pr_data)
# Nomes das colunas
names(pr_data) <- c("PassengerId", "Survived")
# Gravação em disco do arquivo a ser submetido no site Kaggle
write.csv(pr_data, file="/home/henrique/Documents/BigData/Desafio1/predict.csv", row.names = FALSE)
